# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_V1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import qdarkstyle
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets 
import ScratchAlgorithms as algo
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QFileDialog
from PyQt5.QtGui import QPixmap
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import QImage, QPixmap
import qimage2ndarray
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib
matplotlib.use('Qt5Agg')
from PIL import Image,ImageQt
import matplotlib.pyplot as plt
from PyQt5.QtCore import QFile , QTextStream
import cv2 #just to read the images
import os
#from PIL.ImageQt import ImageQt
class Ui_MainWindow(object):


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1202, 766)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(480, 10, 711, 751))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 20, 671, 301))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.OriginalImageBox = QtWidgets.QLabel(self.layoutWidget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OriginalImageBox.sizePolicy().hasHeightForWidth())
        self.OriginalImageBox.setSizePolicy(sizePolicy)
        self.OriginalImageBox.setFrameShape(QtWidgets.QFrame.Box)
        self.OriginalImageBox.setScaledContents(True)
        self.OriginalImageBox.setAlignment(QtCore.Qt.AlignCenter)
        self.OriginalImageBox.setObjectName("OriginalImageBox")
        self.horizontalLayout_3.addWidget(self.OriginalImageBox)
        self.OutputImageBox = QtWidgets.QLabel(self.layoutWidget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OutputImageBox.sizePolicy().hasHeightForWidth())
        self.OutputImageBox.setSizePolicy(sizePolicy)
        self.OutputImageBox.setFrameShape(QtWidgets.QFrame.Box)
        self.OutputImageBox.setScaledContents(True)
        self.OutputImageBox.setAlignment(QtCore.Qt.AlignCenter)
        self.OutputImageBox.setObjectName("OutputImageBox")
        self.horizontalLayout_3.addWidget(self.OutputImageBox)
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget2.setGeometry(QtCore.QRect(20, 330, 671, 31))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.ChooseImageBtn = QtWidgets.QPushButton(self.layoutWidget2)
        self.ChooseImageBtn.setObjectName("ChooseImageBtn")
        self.horizontalLayout_2.addWidget(self.ChooseImageBtn)
        self.SaveImageBtn = QtWidgets.QPushButton(self.layoutWidget2)
        self.SaveImageBtn.setObjectName("SaveImageBtn")
        self.horizontalLayout_2.addWidget(self.SaveImageBtn)
        self.verticalLayout.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupBox_2.setFlat(False)
        self.groupBox_2.setObjectName("groupBox_2")
        self.HistogramBox = QtWidgets.QLabel(self.groupBox_2)
        self.HistogramBox.setGeometry(QtCore.QRect(20, 20, 671, 301))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.HistogramBox.sizePolicy().hasHeightForWidth())
        self.HistogramBox.setSizePolicy(sizePolicy)
        self.HistogramBox.setFrameShape(QtWidgets.QFrame.Box)
        self.HistogramBox.setScaledContents(True)
        self.HistogramBox.setAlignment(QtCore.Qt.AlignCenter)
        self.HistogramBox.setObjectName("HistogramBox")
        self.layoutWidget3 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget3.setGeometry(QtCore.QRect(20, 320, 671, 41))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget3)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.HistogramOrignalShowBtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.HistogramOrignalShowBtn.setObjectName("HistogramOrignalShowBtn")
        self.horizontalLayout.addWidget(self.HistogramOrignalShowBtn)
        self.HistogramOutputShowBtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.HistogramOutputShowBtn.setObjectName("HistogramOutputShowBtn")
        self.horizontalLayout.addWidget(self.HistogramOutputShowBtn)
        self.verticalLayout.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 10, 461, 81))
        self.groupBox_3.setObjectName("groupBox_3")
        self.label = QtWidgets.QLabel(self.groupBox_3)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(11, 21, 38, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 61, 16))
        self.label_2.setScaledContents(False)
        self.label_2.setObjectName("label_2")
        self.SegmetationValueBox = QtWidgets.QSpinBox(self.groupBox_3)
        self.SegmetationValueBox.setGeometry(QtCore.QRect(80, 21, 251, 20))
        self.SegmetationValueBox.setAlignment(QtCore.Qt.AlignCenter)
        self.SegmetationValueBox.setMaximum(255)
        self.SegmetationValueBox.setObjectName("SegmetationValueBox")
        self.spinBox_2 = QtWidgets.QSpinBox(self.groupBox_3)
        self.spinBox_2.setEnabled(False)
        self.spinBox_2.setGeometry(QtCore.QRect(80, 50, 251, 20))
        self.spinBox_2.setAlignment(QtCore.Qt.AlignCenter)
        self.spinBox_2.setObjectName("spinBox_2")
        self.ManualSegmentationBtn = QtWidgets.QPushButton(self.groupBox_3)
        self.ManualSegmentationBtn.setGeometry(QtCore.QRect(350, 20, 91, 23))
        self.ManualSegmentationBtn.setObjectName("ManualSegmentationBtn")
        self.AutoSegemetationBtn = QtWidgets.QPushButton(self.groupBox_3)
        self.AutoSegemetationBtn.setGeometry(QtCore.QRect(350, 50, 91, 23))
        self.AutoSegemetationBtn.setObjectName("AutoSegemetationBtn")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 100, 461, 91))
        self.groupBox_4.setObjectName("groupBox_4")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setGeometry(QtCore.QRect(10, 30, 101, 16))
        self.label_3.setObjectName("label_3")
        self.ContrastStrechingBtn = QtWidgets.QPushButton(self.groupBox_4)
        self.ContrastStrechingBtn.setGeometry(QtCore.QRect(350, 20, 91, 23))
        self.ContrastStrechingBtn.setObjectName("ContrastStrechingBtn")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(10, 50, 121, 16))
        self.label_4.setObjectName("label_4")
        self.HistogramEqualizationBtn = QtWidgets.QPushButton(self.groupBox_4)
        self.HistogramEqualizationBtn.setGeometry(QtCore.QRect(350, 50, 91, 23))
        self.HistogramEqualizationBtn.setObjectName("HistogramEqualizationBtn")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 200, 461, 121))
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_5 = QtWidgets.QLabel(self.groupBox_5)
        self.label_5.setGeometry(QtCore.QRect(10, 20, 61, 16))
        self.label_5.setObjectName("label_5")
        self.horizontalSlider = QtWidgets.QSlider(self.groupBox_5)
        self.horizontalSlider.setGeometry(QtCore.QRect(80, 20, 261, 22))
        self.horizontalSlider.setMinimum(1)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.SliderValueLabel = QtWidgets.QLabel(self.groupBox_5)
        self.SliderValueLabel.setGeometry(QtCore.QRect(370, 20, 51, 21))
        self.SliderValueLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.SliderValueLabel.setObjectName("SliderValueLabel")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox.setGeometry(QtCore.QRect(80, 50, 261, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.label_6 = QtWidgets.QLabel(self.groupBox_5)
        self.label_6.setGeometry(QtCore.QRect(20, 50, 47, 21))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_5)
        self.label_7.setGeometry(QtCore.QRect(10, 80, 61, 16))
        self.label_7.setObjectName("label_7")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox_2.setGeometry(QtCore.QRect(80, 80, 261, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.LinearSmoothingBtn = QtWidgets.QPushButton(self.groupBox_5)
        self.LinearSmoothingBtn.setGeometry(QtCore.QRect(350, 50, 91, 23))
        self.LinearSmoothingBtn.setObjectName("LinearSmoothingBtn")
        self.NonLinearSmoothingBtn = QtWidgets.QPushButton(self.groupBox_5)
        self.NonLinearSmoothingBtn.setGeometry(QtCore.QRect(350, 80, 91, 23))
        self.NonLinearSmoothingBtn.setObjectName("NonLinearSmoothingBtn")
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 330, 461, 91))
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_8 = QtWidgets.QLabel(self.groupBox_6)
        self.label_8.setGeometry(QtCore.QRect(10, 20, 111, 21))
        self.label_8.setObjectName("label_8")
        self.CannyBtn = QtWidgets.QPushButton(self.groupBox_6)
        self.CannyBtn.setGeometry(QtCore.QRect(350, 20, 91, 23))
        self.CannyBtn.setObjectName("CannyBtn")
        self.label_9 = QtWidgets.QLabel(self.groupBox_6)
        self.label_9.setGeometry(QtCore.QRect(10, 52, 47, 21))
        self.label_9.setObjectName("label_9")
        self.comboBox_3 = QtWidgets.QComboBox(self.groupBox_6)
        self.comboBox_3.setGeometry(QtCore.QRect(70, 50, 261, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.SobelBtn = QtWidgets.QPushButton(self.groupBox_6)
        self.SobelBtn.setGeometry(QtCore.QRect(350, 50, 91, 23))
        self.SobelBtn.setObjectName("SobelBtn")
        self.groupBox_7 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_7.setGeometry(QtCore.QRect(10, 430, 461, 51))
        self.groupBox_7.setObjectName("groupBox_7")
        self.label_10 = QtWidgets.QLabel(self.groupBox_7)
        self.label_10.setGeometry(QtCore.QRect(10, 20, 51, 21))
        self.label_10.setObjectName("label_10")
        self.LaplacianEnhancedBox = QtWidgets.QCheckBox(self.groupBox_7)
        self.LaplacianEnhancedBox.setGeometry(QtCore.QRect(70, 20, 70, 21))
        self.LaplacianEnhancedBox.setObjectName("LaplacianEnhancedBox")
        self.LaplacianBtn = QtWidgets.QPushButton(self.groupBox_7)
        self.LaplacianBtn.setGeometry(QtCore.QRect(350, 20, 91, 23))
        self.LaplacianBtn.setObjectName("LaplacianBtn")
        self.groupBox_8 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_8.setGeometry(QtCore.QRect(10, 490, 461, 131))
        self.groupBox_8.setObjectName("groupBox_8")
        self.label_11 = QtWidgets.QLabel(self.groupBox_8)
        self.label_11.setGeometry(QtCore.QRect(10, 20, 61, 16))
        self.label_11.setObjectName("label_11")
        self.ImageSizeLabel = QtWidgets.QLabel(self.groupBox_8)
        self.ImageSizeLabel.setGeometry(QtCore.QRect(70, 20, 71, 16))
        self.ImageSizeLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.ImageSizeLabel.setText("")
        self.ImageSizeLabel.setObjectName("ImageSizeLabel")
        self.label_12 = QtWidgets.QLabel(self.groupBox_8)
        self.label_12.setGeometry(QtCore.QRect(10, 40, 51, 21))
        self.label_12.setObjectName("label_12")
        self.spinBox = QtWidgets.QSpinBox(self.groupBox_8)
        self.spinBox.setGeometry(QtCore.QRect(70, 40, 281, 22))
        self.spinBox.setMinimum(1)
        self.spinBox.setMaximum(1000000000)
        self.spinBox.setObjectName("spinBox")
        self.label_13 = QtWidgets.QLabel(self.groupBox_8)
        self.label_13.setGeometry(QtCore.QRect(370, 40, 61, 21))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.groupBox_8)
        self.label_14.setGeometry(QtCore.QRect(10, 70, 47, 21))
        self.label_14.setObjectName("label_14")
        self.comboBox_4 = QtWidgets.QComboBox(self.groupBox_8)
        self.comboBox_4.setGeometry(QtCore.QRect(70, 70, 281, 22))
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.label_15 = QtWidgets.QLabel(self.groupBox_8)
        self.label_15.setGeometry(QtCore.QRect(10, 100, 47, 13))
        self.label_15.setObjectName("label_15")
        self.TimeTransmittionLabel = QtWidgets.QLabel(self.groupBox_8)
        self.TimeTransmittionLabel.setGeometry(QtCore.QRect(70, 100, 111, 16))
        self.TimeTransmittionLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.TimeTransmittionLabel.setText("")
        self.TimeTransmittionLabel.setObjectName("TimeTransmittionLabel")
        self.label_16 = QtWidgets.QLabel(self.groupBox_8)
        self.label_16.setGeometry(QtCore.QRect(190, 100, 61, 16))
        self.label_16.setObjectName("label_16")
        self.TimeBtn = QtWidgets.QPushButton(self.groupBox_8)
        self.TimeBtn.setGeometry(QtCore.QRect(360, 100, 91, 23))
        self.TimeBtn.setObjectName("TimeBtn")
        self.groupBox_9 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_9.setGeometry(QtCore.QRect(10, 700, 461, 61))
        self.groupBox_9.setObjectName("groupBox_9")
        self.WarningLabel = QtWidgets.QLabel(self.groupBox_9)
        self.WarningLabel.setGeometry(QtCore.QRect(20, 20, 421, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.WarningLabel.setFont(font)
        self.WarningLabel.setText("")
        self.WarningLabel.setObjectName("WarningLabel")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        #slider
        self.horizontalSlider.valueChanged.connect(self.sliderMoves)


        #Click events
        try:
            self.ChooseImageBtn.clicked.connect(self.chooseImageClick)
            self.ManualSegmentationBtn.clicked.connect(self.ManualSegemtationClick)
            self.AutoSegemetationBtn.clicked.connect(self.AutoSegemtationClick)
            self.HistogramOrignalShowBtn.clicked.connect(self.HistoGramOriginalClick)
            self.HistogramOutputShowBtn.clicked.connect(self.HistoGramNewClick)
            self.ContrastStrechingBtn.clicked.connect(self.ContrastStrechingclick)
            self.HistogramEqualizationBtn.clicked.connect(self.HistogramEqualizationClick)
            self.LinearSmoothingBtn.clicked.connect(self.LinearFilterClick)
            self.NonLinearSmoothingBtn.clicked.connect(self.NonLinearFilterClick)
            self.CannyBtn.clicked.connect(self.cannyClick)
            self.SobelBtn.clicked.connect(self.SobelClick)
            self.LaplacianBtn.clicked.connect(self.LaplacianClick)
            self.TimeBtn.clicked.connect(self.TimeTransmissionClick)
            self.SaveImageBtn.clicked.connect(self.saveImageClick)
        except:
            pass

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Image Processing"))
        self.groupBox.setTitle(_translate("MainWindow", "Image"))
        self.OriginalImageBox.setText(_translate("MainWindow", "Choose Image"))
        self.OutputImageBox.setText(_translate("MainWindow", "New Image"))
        self.ChooseImageBtn.setText(_translate("MainWindow", "Choose Image"))
        self.SaveImageBtn.setText(_translate("MainWindow", "Save new Image"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Histogram"))
        self.HistogramBox.setText(_translate("MainWindow", "Histogram"))
        self.HistogramOrignalShowBtn.setText(_translate("MainWindow", "Original"))
        self.HistogramOutputShowBtn.setText(_translate("MainWindow", "Output"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Segmentation"))
        self.label.setText(_translate("MainWindow", "Manual:"))
        self.label_2.setText(_translate("MainWindow", "Automatic:"))
        self.ManualSegmentationBtn.setText(_translate("MainWindow", "Apply"))
        self.AutoSegemetationBtn.setText(_translate("MainWindow", "Apply"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Contrast Streching"))
        self.label_3.setText(_translate("MainWindow", "Contrast Streching :"))
        self.ContrastStrechingBtn.setText(_translate("MainWindow", "Apply"))
        self.label_4.setText(_translate("MainWindow", "Histogram Equalization :"))
        self.HistogramEqualizationBtn.setText(_translate("MainWindow", "Apply"))
        self.groupBox_5.setTitle(_translate("MainWindow", "ٍSmoothing"))
        self.label_5.setText(_translate("MainWindow", "Kernel size :"))
        self.SliderValueLabel.setText(_translate("MainWindow", "1 Px"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Box/Mean Filter"))
        self.label_6.setText(_translate("MainWindow", "Linear :"))
        self.label_7.setText(_translate("MainWindow", "Non-linear :"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "Min filter"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Max filter"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Median filter"))
        self.LinearSmoothingBtn.setText(_translate("MainWindow", "Apply"))
        self.NonLinearSmoothingBtn.setText(_translate("MainWindow", "Apply"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Edge detection"))
        self.label_8.setText(_translate("MainWindow", "Canny :"))
        self.CannyBtn.setText(_translate("MainWindow", "Apply"))
        self.label_9.setText(_translate("MainWindow", "Sobel :"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "Default"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "Vertical"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "Horizontal"))
        self.SobelBtn.setText(_translate("MainWindow", "Apply"))
        self.groupBox_7.setTitle(_translate("MainWindow", "sharpening"))
        self.label_10.setText(_translate("MainWindow", "Laplacian :"))
        self.LaplacianEnhancedBox.setText(_translate("MainWindow", "enhanced"))
        self.LaplacianBtn.setText(_translate("MainWindow", "Apply"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Time Transmition"))
        self.label_11.setText(_translate("MainWindow", "Image Size :"))
        self.label_12.setText(_translate("MainWindow", "Baud rate :"))
        self.label_13.setText(_translate("MainWindow", "K ( X1000)"))
        self.label_14.setText(_translate("MainWindow", "Channel :"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "GrayScale"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "RGB"))
        self.label_15.setText(_translate("MainWindow", "Time :"))
        self.label_16.setText(_translate("MainWindow", "Seconeds"))
        self.TimeBtn.setText(_translate("MainWindow", "Calculate"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Warnings"))


    

    def Histo(self,img):
            canvas = algo.calculate_histogram(img)
            #convert the Matplotlip Canvas to Pixmap to display it
            buffer = canvas.buffer_rgba()
            image = QImage(buffer, buffer.shape[1], buffer.shape[0], QImage.Format_RGBA8888)
            pixmap = QPixmap.fromImage(image)
            self.HistogramBox.setPixmap(pixmap)
            self.newHistogram = pixmap
            


    def chooseImageClick(self):
       #choose image from the system
        fname = QFileDialog.getOpenFileName(QWidget(), 'Open file', './')
        if fname[0]:
            #display the original image
            pixmap = QPixmap(fname[0])
            self.OriginalImageBox.setPixmap(pixmap)
            #create the histogram of the original image
            canvas = algo.calculate_histogram(fname[0])
            #convert the Matplotlip Canvas to Pixmap to display it
            buffer = canvas.buffer_rgba()
            image = QImage(buffer, buffer.shape[1], buffer.shape[0], QImage.Format_RGBA8888)
            pixmap = QPixmap.fromImage(image)
            self.HistogramBox.setPixmap(pixmap)
            self.OriginalHistogram = pixmap
            # return the path to the original image path
            self.OriginalImage = fname[0]
            shape = Image.open(fname[0]).size
            self.ImageSizeLabel.setText("{H} X {W}".format( H = shape[0] , W = shape[1]))
            self.WarningLabel.setText("")

    
    def ManualSegemtationClick(self):
        #get the threshold point value 
        segmetationValue = self.SegmetationValueBox.value()
        #get priginal image path
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        #get the image form the path then convert it ti grayscal and np array
        im = np.asarray(Image.open(img_path).convert('L'))
        #Aplly the segemtation
        ManualSegmetation = algo.threshold_image(im,segmetationValue)
        #convert the result np array to grayscale image
        pil_image = Image.fromarray((ManualSegmetation*255).astype(np.uint8))
        grayscale_image = pil_image.convert('L')
        self.Histo((ManualSegmetation*255).astype(int))
        #convert the image to QImage and Pixmap to display it

        
        #qimage = QImage(pil_image.tobytes(), pil_image.width, pil_image.height, QImage.Format_Grayscale8)
        #pixmap = QPixmap.fromImage(qimage)
        grayscale_image.save("output.png")
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap

    def AutoSegemtationClick(self):
        #get priginal image path
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        #get the image form the path then convert it ti grayscal and np array
        im = np.asarray(Image.open(img_path).convert('L'))
        #Aplly the segemtation
        best_threshold = algo.find_best_threshold(im)
        AutoSegmetation = algo.threshold_image(im,best_threshold)
        self.spinBox_2.setValue(int(best_threshold))
        #convert the result np array to grayscale image
        pil_image = Image.fromarray((AutoSegmetation*255).astype(np.uint8))

        grayscale_image = pil_image.convert(mode = 'L')
        
        self.Histo((AutoSegmetation*255).astype(int))


        #convert the image to QImage and Pixmap to display it
        # print(AutoSegmetation.shape)
        # qimage = QImage(grayscale_image.tobytes(), grayscale_image.width, grayscale_image.height, QImage.Format_Grayscale8)
        # pixmap = QPixmap.fromImage(qimage)
        grayscale_image.save("output.png")
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap



    def ContrastStrechingclick(self):
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        im = algo.contrast_stretching(img_path)
        im_array = np.array(im)
        self.Histo(im_array.astype(int))
        #convert the image to QImage and Pixmap to display it

        #save the new image and reread it to avoid non sense form QImage converting function
        im.save("output.png")
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap


    def HistogramEqualizationClick(self):
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        im = algo.Histogram_equalizer(img_path)
        im_array = np.array(im)
        self.Histo(im_array.astype(int))

        im.save("output.png")
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap


    def sliderMoves(self,value):
        self.SliderValueLabel.setText(str(value) + " Px")
        



    def LinearFilterClick(self):
        Ksize = self.horizontalSlider.value()
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        im = cv2.imread(img_path)
        if(self.comboBox.currentText() == "Box/Mean Filter"):
            OutImage = algo.box_filter(im,Ksize)
            self.Histo(OutImage.astype(int))
            cv2.imwrite("output.png",OutImage)
            pixmap = QPixmap("output.png")
            self.OutputImageBox.setPixmap(pixmap)
            self.finalImage = pixmap

    def NonLinearFilterClick(self):
        Ksize = self.horizontalSlider.value()
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        im = cv2.imread(img_path)
        if(self.comboBox_2.currentText() == "Min filter"):
            OutImage = algo.min_filter(im,Ksize)
            # self.Histo(OutImage.astype(int))
            # cv2.imwrite("output.png",OutImage)
            # pixmap = QPixmap("output.png")
            # self.OutputImageBox.setPixmap(pixmap)

        elif(self.comboBox_2.currentText() == "Max filter"):
            OutImage = algo.max_filter(im,Ksize)
            # self.Histo(OutImage.astype(int))
            # cv2.imwrite("output.png",OutImage)
            # pixmap = QPixmap("output.png")
            # self.OutputImageBox.setPixmap(pixmap)

        elif(self.comboBox_2.currentText() == "Median filter"):
            OutImage = algo.median_filter(im,Ksize)
            # self.Histo(OutImage.astype(int))
            # cv2.imwrite("output.png",OutImage)
            # pixmap = QPixmap("output.png")
            # self.OutputImageBox.setPixmap(pixmap)
        self.Histo(OutImage.astype(int))
        cv2.imwrite("output.png",OutImage)
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap
    
    def cannyClick(self):
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        
        OutImage = algo.canny(img_path)
        
        self.Histo(OutImage.astype(int))
        cv2.imwrite("output.png",OutImage*255)
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap

    def SobelClick(self):
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        outImage = None
        if(self.comboBox_3.currentText() == "Default"):
            outImage = algo.sobel(img_path,"both")
            outImage = algo.ImageNormalize(outImage)

        elif(self.comboBox_3.currentText() == "Vertical"):
            outImage = algo.sobel(img_path,"y")
            outImage = algo.ImageNormalize(outImage)

        elif(self.comboBox_3.currentText() == "Horizontal"):
            outImage = algo.sobel(img_path,"x")
            outImage = algo.ImageNormalize(outImage)

        self.Histo(outImage.astype(int))
        cv2.imwrite("output.png",outImage)
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap

    def LaplacianClick(self):
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return 
        outImage = None
        
        if(self.LaplacianEnhancedBox.isChecked() == False):
            outImage = algo.laplacian_filter(img_path)
        else:
            outImage = algo.laplacian_filter(img_path,True)
        
        self.Histo(outImage.astype(int))
        cv2.imwrite("output.png",outImage)
        pixmap = QPixmap("output.png")
        self.OutputImageBox.setPixmap(pixmap)
        self.finalImage = pixmap

 

    def TimeTransmissionClick(self):
        try:
            img_path = self.OriginalImage
        except:
            self.warnningClick()
            return
        shape = Image.open(img_path).size
        bits = None
        if(self.comboBox_4.currentText() == "GrayScale"):
            bits = shape[0] * shape[1] * 10
        elif(self.comboBox_4.currentText() == "RGB"):
            bits = shape[0] * shape[1] * 10 * 3

        buadRate = self.spinBox.value() * 1000
        time = bits / buadRate
        self.TimeTransmittionLabel.setText("{:.2f}".format(time))



    def HistoGramOriginalClick(self):
        try:
            self.HistogramBox.setPixmap(self.OriginalHistogram)
        except:
            self.WarningLabel.setText("Apply an algorithm first")
            return

    def HistoGramNewClick(self):
        
        try:
            self.HistogramBox.setPixmap(self.newHistogram)
        except:
            self.WarningLabel.setText("Apply an algorithm first")
            return

    def warnningClick(self):
        self.WarningLabel.setText("Choose image first")

    def saveImageClick(self):
        try:
            outputImage = self.finalImage
        except:
            self.WarningLabel.setText("Apply an algorithm first")
            return
        
        # Get the file name and location to save the file using a file dialog
        file_name, _ = QFileDialog.getSaveFileName(None, 'Save Image', 'Final.png', 'Images (*.png *.jpg *.bmp)')
        # If the user selects a file, save the QPixmap object as an image file
        if file_name:
            outputImage.save(file_name)
            self.WarningLabel.setText("")

    
        
        




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    #     with open("qtheme.qss", "r") as f:
    #         _style = f.read()
    #         app.setStyleSheet(_style)


    ex = app.exec_()

    if os.path.exists("output.png"):
        os.remove("output.png")
    if os.path.exists("Histo.png"):
        os.remove("Histo.png")

    sys.exit(ex)
